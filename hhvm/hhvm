#!/bin/sh
#
# /etc/init.d/hhvm -- startup script for HHVM FastCGI
#

# Author: Dominic Luechinger <dol@snowgarden.ch>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="HHVM FastCGI Daemon"
NAME=hhvm
DAEMON=/usr/bin/hhvm
PIDFILE=/var/run/hhvm/pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Default values. This values can be overwritten in '/etc/default/hhvm'
CONFIG_FILE="/etc/hhvm/server.ini"
SYSTEM_CONFIG_FILE="/etc/hhvm/php.ini"
RUN_AS_USER="www"
RUN_AS_GROUP="www"
ADDITIONAL_ARGS=""

DAEMON_ARGS="--config ${SYSTEM_CONFIG_FILE} \
--config ${CONFIG_FILE} \
--user ${RUN_AS_USER} \
--mode daemon \
-vPidFile=${PIDFILE} \
${ADDITIONAL_ARGS}"


#
# Function that starts the daemon/service
#
check_run_dir() {
    # Only perform folder creation, if the PIDFILE location was not modified
    PIDFILE_BASEDIR=$(dirname ${PIDFILE})
    # We might have a tmpfs /var/run.
    if [ "/var/run/hhvm" = "${PIDFILE_BASEDIR}" ] && [ ! -d /var/run/hhvm ]; then
        mkdir -p -m0755 /var/run/hhvm
        chown $RUN_AS_USER:$RUN_AS_GROUP /var/run/hhvm
    fi
    if [ ! -d /var/log/hhvm ]; then
        mkdir -p -m0755 /var/log/hhvm
        chown $RUN_AS_USER:$RUN_AS_GROUP /var/log/hhvm
    fi
    if [ ! -d /var/cache/hhvm ]; then
        mkdir -p -m0755 /var/cache/hhvm
        chown $RUN_AS_USER:$RUN_AS_GROUP /var/cache/hhvm
    fi
    if [ ! -d /var/lib/hhvm ]; then
        mkdir -p -m0755 /var/lib/hhvm
        chown $RUN_AS_USER:$RUN_AS_GROUP /var/lib/hhvm
    fi
}

do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        touch $PIDFILE
        chown $RUN_AS_USER:$RUN_AS_GROUP $PIDFILE
        start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
                $DAEMON_ARGS \
                || return 2
        # Add code here, if necessary, that waits for the process to be ready
        # to handle requests from services started subsequently which depend
        # on this one. As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        start-stop-daemon --stop --quiet --retry=TERM/10/KILL/5 --pidfile $PIDFILE --name $NAME
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2
        # Wait for children to finish too if this is a daemon that forks
        # and if the daemon is only ever run from this initscript.
        # If the above conditions are not satisfied then add some other code
        # that waits for the process to drop all resources that could be
        # needed by services started subsequently.  A last resort is to
        # sleep for some time.
        start-stop-daemon --stop --quiet --oknodo --retry=0/10/KILL/5 --exec $DAEMON
        [ "$?" = 2 ] && return 2
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
        return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
        #
        # If the daemon can reload its configuration without
        # restarting (for example, when it is sent a SIGHUP),
        # then implement that here.
        #
        start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
        return 0
}

case "$1" in
  start)
        check_run_dir
        do_start
        ;;
  stop)
        do_stop
        ;;
  status)
        status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
  #reload|force-reload)
        #
        # If do_reload() is not implemented then leave this commented out
        # and leave 'force-reload' as an alias for 'restart'.
        #
        #log_daemon_msg "Reloading $DESC" "$NAME"
        #do_reload
        #log_end_msg $?
        #;;
  restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        check_run_dir
        do_stop
        case "$?" in
          0|1)
                do_start
                 ;;
          *)
                # Failed to stop
                 ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

:
